plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '2.2.0'
}

version '1.0'

// 使用新版Gradle的扩展配置方式
def mindustryVersion = 'v150.1'
def sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")

repositories {
    mavenCentral()
    maven { url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
    maven { url 'https://www.jitpack.io' }
}

dependencies {
    implementation "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    implementation "com.github.Anuken.Mindustry:core:$mindustryVersion"
}

// 配置Java和Kotlin的兼容性
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

// 更新后的jar任务配置
tasks.register('jarAndroid', Jar) {
    dependsOn jar
    
    doLast {
        if (!sdkRoot || !new File(sdkRoot).exists()) {
            throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.")
        }

        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find { f -> 
            new File(f, "android.jar").exists()
        }

        if (!platformRoot) {
            throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")
        }

        // collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() + 
                          configurations.runtimeClasspath.asList() + 
                          [new File(platformRoot, "android.jar")])
                          .collect { "--classpath $it.path" }.join(" ")

        // dex and desugar files - this requires d8 in your PATH
        "d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar"
            .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName = "${project.archivesBaseName}Desktop.jar"

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir) {
        include "mod.hjson"
    }

    from("assets/") {
        include "**"
    }
}

tasks.register('deploy', Jar) {
    dependsOn jarAndroid
    dependsOn jar
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName = "${project.archivesBaseName}.jar"

    from { 
        [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), 
         zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] 
    }

    doLast {
        delete {
            delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
            delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
        }
    }
}
